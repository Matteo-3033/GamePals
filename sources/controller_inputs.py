from dataclasses import dataclass
from enum import StrEnum


class InputType(StrEnum):
    """
    Enum class representing a Type of Input in an XBOX 360 Controller
    """

    BTN_A = "A"  # Values are {0, 1}
    BTN_B = "B"  # Values are {0, 1}
    BTN_Y = "Y"  # Values are {0, 1}
    BTN_X = "X"  # Values are {0, 1}
    BUMPER_RIGHT = "Bumper_Right"  # Values are {0, 1}
    BUMPER_LEFT = "Bumper_Left"  # Values are {0, 1}
    THUMB_RIGHT = "Thumb_Right"  # Values are {0, 1}
    THUMB_LEFT = "Thumb_Left"  # Values are {0, 1}
    DIR_PAD_X = "DirPad_X"  # Values are {-1, 0, 1}
    DIR_PAD_Y = "DirPad_Y"  # Values are {-1, 0, 1}
    TRIGGER_RIGHT = "Trigger_Right"  # Values are in [0, 255]
    TRIGGER_LEFT = "Trigger_Left"  # Values are in [0, 255]
    STICK_RIGHT_X = "Stick_Right_X"  # Values are in [-32768, 32767]
    STICK_RIGHT_Y = "Stick_Right_Y"  # Values are in [-32768, 32767]
    STICK_LEFT_X = "Stick_Left_X"  # Values are in [-32768, 32767]
    STICK_LEFT_Y = "Stick_Left_Y"  # Values are in [-32768, 32767]
    BTN_BACK = "Back"  # Values are {0, 1}
    BTN_START = "Start"  # Values are {0, 1}

    def get_max_value(self) -> int:
        """
        Returns the max value the InputType admits.
        It's needed to specify what represents a "True" value in a Binary Merge logic.
        """
        match self:
            case InputType.TRIGGER_RIGHT | InputType.TRIGGER_LEFT:
                return 255
            case InputType.STICK_LEFT_X | InputType.STICK_RIGHT_X | InputType.STICK_LEFT_Y | InputType.STICK_RIGHT_Y:
                return 32767
            case _:
                return 1


@dataclass
class ControllerInput:
    """ ControllerInput is an input generated by an XBOX 360 Controller. """
    type: InputType
    val: float
